#include<stdio.h>
#include<conio.h>
#include<process.h>
#include<stdlib.h>
#include<string.h>
#include<glut.h>
#include<gl.h>
#include<glu.h>
int  n = -1;
float j = 0.5;
int num, ar[30];
float li = -6.0, R = 1.0, G = 1.0, B = 1.0, R1, G1, B1;
int l = 0;
int de;
int ch = 0;
int se = 0;
int ch1 = 0;
int f1, f2;
int f3;
int temp;
void display();

void displayText(float x, float y, float R1, float G1, float B1, const char* string) {
    int j = strlen(string);
    glColor3f(R1, G1, B1);
    glRasterPos2f(x, y);
    for (int i = 0; i < j; i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, string[i]);
    glFlush();
}

void keys(unsigned char key, int x, int y) {
    if (key == 'c' || key == 'C')
    {
        if (f1 == 1) {
            R = 0.0666; G = 0.0588; B = 0.4313;
            f1 = 2;
        }
        else if (f1 == 2) {
            R = 0.3686; G = 0.0; B = 0.5803;
            f1 = 3;
        }
        else if (f1 == 3) {
            R = 0.0078; G = 0.4313; B = 0.5607;
            f1 = 1;
        }
    }

    if (key == 13) {
        l = 1;
    }
    if (key == 27)
    {
        if (l == 3)
        {
            l--;
        }
        if (l == 4)
        {
            l = l - 2;
        }
        l--;
    }
    display();
}       

void draw_node(float i, float j, int ch1, int mv)

{

    if (l > 0)
    {


        if (ch1 == 0)
        {


            char text[20];
            int vv = 0;
            sprintf_s(text, "%d", mv);
            glColor3f(1.0, 0.0, 0.0);
            glRasterPos2f(i + 0.1, j - 0.28);
            while (text[vv] != '\0')
            {
                glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[vv]);
                vv++;
            }

            glColor3f(1.0, 0.60, 0.0);
            glBegin(GL_LINES);
            glVertex2f(i, 0);
            glVertex2f(i, j);
            glVertex2f(i, j);
            glVertex2f(i + 0.5, j);
            glVertex2f(i + 0.5, j);
            glVertex2f(i + 0.5, 0);
            glVertex2f(i + 0.5, 0);
            glVertex2f(i, 0);
            glEnd();

        }
        else
        {
            char text[20];
            int vv = 0;
            sprintf_s(text, "%d", mv);
            glColor3f(0.0, 1.0, 0.0);
            glRasterPos2f(i + 0.1, j - 0.28);
            while (text[vv] != '\0')
            {
                glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[vv]);
                vv++;
            }

            glColor3f(0.0, 1.0, 0.0);
            glBegin(GL_LINES);
            glVertex2f(i, 0);
            glVertex2f(i, j);
            glVertex2f(i, j);
            glVertex2f(i + 0.5, j);
            glVertex2f(i + 0.5, j);
            glVertex2f(i + 0.5, 0);
            glVertex2f(i + 0.5, 0);
            glVertex2f(i, 0);
            glEnd();
        }


    }
    else
    {
        glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_POLYGON);
        glVertex2f(i, 0);
        glVertex2f(i, j);
        glVertex2f(i + 0.5, j);
        glVertex2f(i + 0.5, 0);
        glEnd();

    }

    glFlush();
}


void node_vertex(void)
{
    int c = -1;
    li = -6.5;
    ;
    if (n == -1) {
        l = 0;
        draw_node(1, 1, 0, 1);
    }
    else {
        printf("The Data present in Linked List are: ");
        for (int r = 0; r <= n; r++)
        {
            li = li + 0.5;
        }
        for (float i = -6; i <= li; i += 0.5)
        {
            ch1 = 0;
            c++;
            if (ar[c] == se)
            {
                ch1 = 1;
            }
            draw_node(i, j, ch1, ar[c]);


        }
    }

}

void frontscreen()
{
    displayText(-2.3, 3.5, 0, 0, 1, "SDM INSTITUTE OF TECHNOLOGY");
    displayText(-3.3, 3, 0, 1, 0.1, "DEPARTMENT OF COMPUTER SEIENCE AND ENGINEERING");
    displayText(-1.8, 2.5, 1, 0.5, 1.0, "MINI PROJECT ON");
    displayText(-2.8, 1.7, 0, 1, 1, "SIMULATION OF ARRAY OPERATIONS");
    displayText(-6, 00, 0.6, 0.3, 0.9, "SUBMITED BY");
    displayText(-6, -0.5, 0.6, 0.3, 0.9, "NIVIL SHIBU");
    displayText(-6, -0.9, 0.6, 0.3, 0.9, "(4SU18CS053)");
    displayText(-6, -1.6, 0.6, 0.3, 0.9, "NITHIN THOMAS");
    displayText(-6, -2.1, 0.6, 0.3, 0.9, "(4SU18CS052)");
    displayText(-6, -2.5, 0.6, 0.3, 0.9, "MANISH J");
    displayText(-6, -2.8, 0.6, 0.3, 0.9, "(4SU18CS039)");
    displayText(3.5, 00, 0.6, 0.3, 0.9, "GUIDED BY");
    displayText(3.5, -0.5, 0.6, 0.3, 0.9, "PRADEEP G S");
    displayText(3.5, -0.9, 0.6, 0.3, 0.9, "Asst. Prof Dept of CSE");
    displayText(-1, -3.1, 0.6, 0.3, 0.9, "[Press Enter to Start]");
    glFlush();
}

void buttonm() {
    displayText(-1.2, 2.2, 1.0, 1.0, 1.0, "New Simulation");
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(-1.5, 2);
    glVertex2f(-1.5, 2.5);
    glVertex2f(0.5, 2.5);
    glVertex2f(0.5, 2);
    glEnd();
    glColor3f(0.0, 0.0, 0.0);
    glLineWidth(6.5f);
    glBegin(GL_LINES);
    glVertex2f(0.5, 2);
    glVertex2f(-1.53, 2);
    glVertex2f(-1.5, 2);
    glVertex2f(-1.5, 2.5);
    glEnd();
    displayText(-0.8, 0.7, 1.0, 1.0, 1.0, "Help");
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(-1.5, 0.5);
    glVertex2f(-1.5, 1);
    glVertex2f(0.5, 1);
    glVertex2f(0.5, 0.5);
    glEnd();
    glColor3f(0.0, 0.0, 0.0);
    glLineWidth(6.5f);
    glBegin(GL_LINES);
    glVertex2f(0.5, 0.5);
    glVertex2f(-1.53, 0.5);
    glVertex2f(-1.5, 0.5);
    glVertex2f(-1.5, 1);
    glEnd();
    displayText(-0.8, -0.8, 1.0, 1.0, 1.0, "Exit");
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_POLYGON);
    glVertex2f(-1.5, -0.5);
    glVertex2f(-1.5, -1);
    glVertex2f(0.5, -1);
    glVertex2f(0.5, -0.5);
    glEnd();
    glColor3f(0.0, 0.0, 0.0);
    glLineWidth(6.5f);
    glBegin(GL_LINES);
    glVertex2f(-1.5, -0.5);
    glVertex2f(-1.5, -1);
    glVertex2f(-1.53, -1);
    glVertex2f(0.5, -1);
    glEnd();


}

void help() {
    displayText(-1.5, 3.5, 0.4666, 0.8784, 0.9058, "HELP FOR USER");
    displayText(-5.5, 2.9, 0.9450, 0.5607, 0.5607, "->To change the color of the background press 'c/C',pressing 'c/C' upto 3 times can change the color 3 times.");
    displayText(-5.5, 2.6, 0.9450, 0.5607, 0.5607, "->By pressing the 'Esc' button you can come backwards");
    displayText(-5.5, 2.3, 0.9450, 0.5607, 0.5607, "->By pressing the 'Enter' button in the title screen, you will get Menu:");
    displayText(-2.0, 2.0, 0.9450, 0.5607, 0.5607, "->1.First button is: 'New Simulation'");
    displayText(-2.0, 1.7, 0.9450, 0.5607, 0.5607, "->2.Second button is: 'Help'");
    displayText(-2.0, 1.4, 0.9450, 0.5607, 0.5607, "->3.Third button is: 'Exit'");
    displayText(-5.5, 1.1, 0.9450, 0.5607, 0.5607, "->Right click of the mouse will bring up a menu, In which:");
    displayText(-2.0, 0.8, 0.9450, 0.5607, 0.5607, "1.First option is: 'Insert Front'");
    displayText(-2.0, 0.5, 0.9450, 0.5607, 0.5607, "2.Second option is: 'Insert Rear'");
    displayText(-2.0, 0.2, 0.9450, 0.5607, 0.5607, "3.Third option is: 'Insert Specified'");
    displayText(-2.0, -0.1, 0.9450, 0.5607, 0.5607, "4.Fourth option is: 'Delete Front'");
    displayText(-2.0, -0.4, 0.9450, 0.5607, 0.5607, "5.Fifth option is: 'Delete Rear'");
    displayText(-2.0, -0.7, 0.9450, 0.5607, 0.5607, "6.Sixth option is: 'Delete Specified'");
    displayText(-2.0, -1.0, 0.9450, 0.5607, 0.5607, "7.Seventh option is: 'Exit'");
}


void display()
{
    glClearColor(R, G, B, 0.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    switch (l)
    {
    case 0:
        frontscreen();
        break;
    case 1:
        buttonm();

        break;
    case 2:
        node_vertex();
        break;
    case 3:
        help();
        break;
    case 4:
        node_vertex();
        break;
    }
    glFlush();
    glFlush();
}



void myReshape(int w, int h)

{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
        glOrtho(-4.0, 4.0, -4.0 * (GLfloat)h / (GLfloat)w, 4.0 * (GLfloat)h / (GLfloat)w, -4.0, 4.0);
    else
        glOrtho(-4.0 * (GLfloat)w / (GLfloat)h, 4.0 * (GLfloat)w / (GLfloat)h, -4.0, 4.0, -4.0, 4.0);
    glMatrixMode(GL_MODELVIEW);
    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)//change this to mimic a button function to change the screen (main menu/restart sorting/etc...)
{
    y = 700 - y;

    if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN) && (x <= 820) && (x >= 610) && (y <= 545) && (y >= 490) && l == 1)
    {
        l = 2;
        display();
    }
    if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN) && (x <= 820) && (x >= 610) && (y <= 385) && (y >= 330) && l == 1)
    {

        l = 3;
        display();

    }
    if ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN) && (x <= 820) && (x >= 610) && (y <= 225) && (y >= 170) && l == 1)
    {
        exit(0);

    }
}

void array_menu(int choice)
{
    int va, va2;

    switch (choice)
    {
    case 1:
        n++;
        printf("Enter the data: ");
        scanf_s("%d", &ar[n]);

        l = 2;
        display();
        break;
    case 2:
        ch = 0;
        printf("Enter the data: ");
        scanf_s("%d", &de);
        for (int r = 0; r <= n; r++)
        {
            if (de == ar[r] || ch == 1)
            {
                ar[r] = ar[r + 1];
                ch = 1;
            }
        }
        if (ch == 1)
        {
            n--;
        }
        if (n == -1)
        {
            l = 0;
        }
        display();
        break;
    case 3:
        se = 0;
        printf("Enter the data: ");
        scanf_s("%d", &de);

        for (int r = 0; r < n; r++)
        {
            if (ar[r] == de)
            {
                se = de;
            }
        }

        display();
        break;
    case 4:
        printf("Enter the array index: ");
        scanf_s("%d", &de);
        for (int r = 0; r <= n; r++)
        {
            if (r == de - 1)
            {
                printf("Enter the value: ");
                scanf_s("%d", &ar[r]);

            }

        }
        display();
        break;
    case 5:
        for (f1 = 0; f1 < n; f1++) {
            f3 = f1;
            for (f2 = f1 + 1; f2 <= n; f2++)
            {
                if (ar[f2] < ar[f3])
                {
                    f3 = f2;
                }
            }
            temp = ar[f1];
            ar[f1] = ar[f3];
            ar[f3] = temp;

        }
        for (int r = 0; r <= n; r++)
        {
            printf(" %d", ar[r]);


        }
        display();
        break;


    case 6:
        exit(0);
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(1500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("ARRAY");
    glutCreateMenu(array_menu);
    glutAddMenuEntry("Insert", 1);
    glutAddMenuEntry("Delete", 2);
    glutAddMenuEntry("search ", 3);
    glutAddMenuEntry("Update", 4);
    glutAddMenuEntry("Sort", 5);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutReshapeFunc(myReshape);
    glutKeyboardFunc(keys);
    glutMouseFunc(mouse);
    glutDisplayFunc(display);
    glEnable(GL_DEPTH_TEST);
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glutMainLoop();
    return 0;
}
